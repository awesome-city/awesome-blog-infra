name: Trigger on tag pushed
on:
  push:
    tags:
      - 'v*'
  release:
    types:
      - prereleased
      - released

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      template-version: ${{ steps.TagName.outputs.value }}
      environment: ${{ steps.Environment.outputs.value }}
    steps:
      - id: TagName
        run: echo "value=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - id: Environment
        run: |
          if [ ${{ github.event_name }} == 'push' ]; then
            echo "value=dev" >> "$GITHUB_OUTPUT"
          elif [ ${{ github.event_name }} == 'release' ] && [ ${{ github.event.action }} == 'prereleased' ]; then
            echo "value=stg" >> "$GITHUB_OUTPUT"
          elif [ ${{ github.event_name }} == 'release' ] && [ ${{ github.event.action }} == 'released' ]; then
            echo "value=prd" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - id: Echo
        run: |
          echo "template-version=${{ steps.TagName.outputs.value }}"
          echo "environment=${{ steps.Environment.outputs.value }}"

  deploy:
    needs:
      - prepare
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    strategy:
      matrix:
        aws-region: [ ap-northeast-1 ]
    env:
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      AWS_REGION: ${{ matrix.aws-region }}
      TEMPLATE_VERSION: ${{ needs.prepare.outputs.template-version }}
    steps:
      - id: prepare
        name: Prepare
        shell: bash
        run: |
          list=(${AWS_REGION//-/ })
          short="${list[0]:0:1}""${list[1]:0:1}""${list[2]:0:1}"
          echo "short-region-name=${short}" >> "$GITHUB_OUTPUT"

          repository=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}
          echo "repository-name=${repository}" >> "$GITHUB_OUTPUT"

          template_base_path="${repository}/${TEMPLATE_VERSION}"
          echo "template-base-path=${template_base_path}" >> "$GITHUB_OUTPUT"
      - name: Echo
        run: |
          echo "ENVIRONMENT=${ENVIRONMENT}"
          echo "AWS_REGION=${AWS_REGION}"
          echo "TEMPLATE_VERSION=${TEMPLATE_VERSION}"
          echo "SHORT_REGION_NAME=${{ steps.prepare.outputs.short-region-name }}"
          echo "REPOSITORY_NAME=${{ steps.prepare.outputs.repository-name }}"
          echo "TEMPLATE_BASE_PATH=${{ steps.prepare.outputs.template-base-path }}"

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Template
        run: |
          aws s3 cp s3://awesome-cmn-cfn/${{ steps.prepare.outputs.template-base-path }}/ . --recursive
          ls -lha .

      - id: cloudformation-s3
        name: AWS CloudFormation "Create s3 stack"
        continue-on-error: true
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: 'awesome-blog-${{ env.ENVIRONMENT }}-s3'
          template: awesome-blog-s3.template.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ServiceName=awesome-blog,
            Environment=${{ env.ENVIRONMENT }},
            ShortRegionName=${{ steps.prepare.outputs.short-region-name }}
          tags: '[ { "Key": "Owner", "Value": "awesome" } ]'

      - id: cloudformation-stateful
        name: AWS CloudFormation "Create stateful stack"
        continue-on-error: true
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: 'awesome-blog-${{ env.ENVIRONMENT }}-stateful'
          template: awesome-blog-stateful.template.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ServiceName=awesome-blog,
            Environment=${{ env.ENVIRONMENT }},
            S3BucketWebDomainName=${{ steps.cloudformation-s3.outputs.S3BucketWebDomainName }},
            OpenAPISpecS3BucketName=awesome-cmn-cfn,
            OpenAPISpecS3Key=${{ steps.prepare.outputs.template-base-path }}/openapi/backend-api.yaml
          tags: '[ { "Key": "Owner", "Value": "awesome" } ]'

      - id: cloudformation-check
        name: check stack
        run: |
          aws cloudformation describe-stack-resources \
            --stack-name 'awesome-blog-${{ env.ENVIRONMENT }}-s3' \
            --output table

          aws cloudformation describe-stack-resources \
            --stack-name 'awesome-blog-${{ env.ENVIRONMENT }}-stateful' \
            --output table

      - id: cloudformation-error-handler
        name: AWS CloudFormation Error handler
        if: failure()
        run: |
          if [ "$ENVIRONMENT" == 'dev' ] then;
            echo "Delete cloudformation template"
            aws s3 rm s3://awesome-cmn-cfn/${{ steps.prepare.outputs.template-base-path }}/ --recursive
          fi
          exit 1
